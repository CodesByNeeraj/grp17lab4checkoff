module alu_manual_tester (
    input clk,  // clock
    input rst,  // reset
    input io_button[5],
    input io_dip[3][8],
    output io_led[3][8],
    output io_segment[8],
    output io_select[4],
    output led[8]
) {
    
    alu alu(#SIZE(32))
//    tester_rom tr
//    operations_rom or
//    result_rom rr
    
//    sig bin1[32]
//    sig bin2[32]
//    sig op[6]
//    sig r[32]
    
    enum States {
        SET_A_LOW,
        SET_A_HIGH,
        SET_B_LOW,
        SET_B_HIGH,
        COMPUTE,
        AUTO,
        IDLE
    }
    
    const SIZE = 32
    const SEVEN_SEG_DIV = $is_sim() ? 3 : 16 // put 3 for sim, 16 on hardware 
    const CLK_FREQ = $is_sim() ? 1000 : 10000000 // put 1000 only for sim, 10M on hardware
    
    edge_detector io_button_edge[5](#RISE(5x{{1}}), #FALL(5x{{0}}), .clk(5x{clk}))
    button_conditioner io_button_cond[5](#CLK_FREQ(5x{{CLK_FREQ}}), .clk(5x{clk}))
         
    multi_seven_seg seg(#DIV(SEVEN_SEG_DIV), .clk(clk), .rst(rst)) 
    dff states[$width(States)](#INIT(States.IDLE), .clk(clk))
    dff a_value[SIZE](.clk(clk), .rst(rst))
    dff b_value[SIZE](.clk(clk), .rst(rst))
    dff current_value[SIZE](.clk(clk), .rst(rst))
    
    bin_to_dec decimal_renderer(#DIGITS(4), #LEADING_ZEROS(1))
    
    always {
        
        // condition the buttons, then take rising edges only
        io_button_cond.in = io_button
        io_button_edge.in = io_button_cond.out
        
        // connect dffs 
        states.d = states.q
        a_value.d = a_value.q
        b_value.d = b_value.q
        current_value.d = current_value.q
        
        // default alu connection
        alu.a = 0
        alu.b = 0
        alu.alufn = 0
        
//        tr.address = 0
//        or.address = 0
//        rr.address = 0
        
//        bin1 = 0
//        bin2 = 0
//        op = 0
//        r = 0

        
        case (states.q){
            States.IDLE:
                	if (io_button_edge.out[0]) { //if button 0 is pressed
                       // set the 16 LSBs of A
    			                states.d = States.SET_A_LOW
    		           }
                	else if (io_button_edge.out[2]) { //if button 2 is pressed down
                       // set the 16 MSBs of A
                		     states.d = States.SET_A_HIGH
                	}
                	else if (io_button_edge.out[3]) { //if button 3 is pressed down
                       // set the 16 LSBs of B
                	      states.d = States.SET_B_LOW
                	}	
                	else if (io_button_edge.out[4]) { //if button 4 is pressed down
                       // set the 16 MSBs of B
                	    	 states.d = States.SET_B_HIGH
                	}
                	else if (io_button_edge.out[1]) { //if button 1 is pressed down
                       // compute the operation
                	    	 states.d = States.COMPUTE
                	}
//                 else if (io_dip[2][7]) {
//                       states.d = States.AUTO
//                }
            
            States.COMPUTE:
                // obtain the alu a value from its dff
            		alu.a = a_value.q
                // obtain the alu b value from its dff
                    alu.b = b_value.q
                // obtain the alu alufn value from the io_dip
                    alu.alufn = io_dip[2][5:0]
                
                if (io_button_edge.out[1]) { //if button 1 is pressed down
                    // return to IDLE    
                	states.d = States.IDLE
                    // reset a and b dffs
                    a_value.d = 0
                    b_value.d = 0
                }
                  
            States.SET_A_LOW:
                // obtain the 16 LSBs of the a value from the 1st and 2nd io_dip from the right
                a_value.d[15:0] = c{io_dip[1], io_dip[0]}
                // return to IDLE
                states.d = States.IDLE
            
            
            States.SET_A_HIGH:
                // obtain the 16 MSBs of the a value from the 1st and 2nd io_dip from the right
                a_value.d[31:16] = c{io_dip[1], io_dip[0]}
                // return to IDLE
                states.d = States.IDLE
            
            States.SET_B_LOW:
                // obtain the 16 LSBs of the b value from the 1st and 2nd io_dip from the right
                b_value.d[15:0] = c{io_dip[1], io_dip[0]}
                // return to IDLE
                states.d = States.IDLE
            
            States.SET_B_HIGH:
                // obtain the 16 MSBs of the b value from the 1st and 2nd io_dip from the right
                b_value.d[31:16] = c{io_dip[1], io_dip[0]}
                // return to IDLE
		            states.d = States.IDLE
            
//             States.AUTO:
//                 repeat(i,30,0,2) {
//                     tr.address = i
//                     bin1 = tr.bin
//                     tr.address = i + 1
//                     bin2 = tr.bin
//                        
//                     or.address = i/2
//                     op = or.op
//                     rr.address = i/2
//                     r = rr.result
//                    
//                     alu.a = bin1
//                     alu.b = bin2
//                     alu.alufn = op
//                     
//                     // if (r == alu.out) {
//                        // if (i <= 14) {
//                            // io_led[0][i/2] = 1
//                        // }
//                        // else {
//                            // io_led[1][i/2] = 1
//                        // }
//                     // }
//                 }

        }
        
        // display the illop,z,v,n on the 7-segments
        current_value.d = 0
        

        if (alu.z) {
            // set the current value to 100 so that if the result is 0,
            // 1 will be displayed on the 2nd io_segment from the left
            current_value.d[2] = 1
            current_value.d[5] = 1
            current_value.d[6] = 1
        }
        if (alu.v) {
            // set the current value to 10 so that if there is an overflow,
            // 1 will be displayed on the 3rd io_segment from the left
            current_value.d[1] = 1
            current_value.d[3] = 1
        }
        if (alu.n) {
            // set the current value to 1 so that if there is an overflow,
            // 1 will be displayed on the 4th io_segment from the left
            current_value.d[0] = 1
        }
        if (alu.illop) {
            // set the current value to 1000 so that if the opcode is not known,
            // 1 will be displayed on the 1st io_segment from the left
            current_value.d = b1111101000
        }

        
        if (states.q == States.IDLE) {
            current_value.d = 0
        }
        
        decimal_renderer.value = current_value.q
        seg.values = decimal_renderer.digits
        
        io_segment = ~seg.seg
        io_select = ~seg.sel
        
        // display the output of the alu on the io_leds (last 24 bits) and the led (first 8 bits)
        io_led[0] = alu.out[7:0]
        io_led[1] = alu.out[15:8]
        io_led[2] = alu.out[23:16]
        led = alu.out[31:24]
        
    }
}