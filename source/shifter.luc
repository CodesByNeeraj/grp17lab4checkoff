module shifter (
    input a[32],
    input b[5],
    input alufn[6],
    output shift[32],
    output illop
) {
    
    x_bit_left_shifter xbls[5](#SHIFT({5d16, 5d8, 5d4, 5d2, 5d1}))
    x_bit_right_shifter xbrs[5](#SHIFT({5d16, 5d8, 5d4, 5d2, 5d1}))
    x_bit_right_ari_shifter xbras[5](#SHIFT({5d16, 5d8, 5d4, 5d2, 5d1}))
    
    
    always {
        xbls.a = 5x{{32b0}}
        xbls.shift = 0
        xbls.pad = 0
        
        xbrs.a = 5x{{32b0}}
        xbrs.shift = 0
        xbrs.pad = 0
        
        xbras.a = 5x{{32b0}}
        xbras.shift = 0
        xbras.pad = 0
        
        // for ith shifter, shift accordingly if ith bit at b is 1
        repeat(i,5) {
            if (i==0) {
                xbls.a[i] = a
                xbls.shift[i] = b[i]
                xbls.pad[i] = 0
            }
            else {
                xbls.a[i] = xbls.out[i-1]
                xbls.shift[i] = b[i]
                xbls.pad[i] = 0
            }
        }
        
        
        repeat(i,5) {
            if (i==0) {
                xbrs.a[i] = a
                xbrs.shift[i] = b[i]
                xbrs.pad[i] = 0
            }
            else {
                xbrs.a[i] = xbrs.out[i-1]
                xbrs.shift[i] = b[i]
                xbrs.pad[i] = 0
            }
        }
        
        // the only difference is that the pad is now the MSB of a so as to retain the sign of a
        repeat(i,5) {
            if (i==0) {
                xbras.a[i] = a
                xbras.shift[i] = b[i]
                xbras.pad[i] = a[31]
            }
            else {
                xbras.a[i] = xbras.out[i-1]
                xbras.shift[i] = b[i]
                xbras.pad[i] = a[31]
            }
        }
        
        illop = 0

        case(alufn[1:0]){
            b00: shift = xbls.out[4]
            b01: shift = xbrs.out[4]
            b11: shift = xbras.out[4]
            default:
                shift = 0
                illop = 1
        }
    } 
}